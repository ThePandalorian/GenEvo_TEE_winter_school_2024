---
title: "Change this to something appropriate"
author: "Modelly McModel face"
editor: source
format:
  html:
      theme: Minty # browse these here: https://quarto.org/docs/output-formats/html-themes.html
      page-layout: full
      #max-width: 1800px # adjust if your plots don't fit or you want more or less whitespace
      toc: true # do you want a table of contents, by default it floats as you scroll
      toc-location: left # where should it be displayed
      toc-title: "Sections"
      code-fold: show # fold code up for neater display
      code-tools: true # add a button at the top of doc to show all code
      code-summary: "Show/hide the code"
      code-line-numbers: true
      smooth-scroll: true
      embed-resources: true # output doc contains all info needed to display html
      #fig-format: png # this is finicky to the point that I'm not sure it works
      lightbox: true
      #page-layout: full
# this changes what parts of your output/code are shown in the report
execute:
      warning: false
      error: false
      echo: TRUE
---

# Step 0: Quarto

Quarto is a mix of a text editor like word or LaTeX and a `.R` file. You can write notes in plain text outside code blocks. Headings are produced by hashtags.

If you want to write R code, you'll need to open a code block. That looks like this

```{r}
# in here you'll need a hashtag to write comments

5*5
```


# Step 1: Setup R

If you don't have them already, `tidyverse`, `patchwork` and `geomtextpath` need to be installed. For those unfamiliar with `R`, you only need to do this once per computer. 

```{r}
# code is commented out because I already have them installed

#options(timeout = 1000) # you need this to install stuff on slow networks
#install.packages(c("tidyverse", "patchwork"))

# not on CRAN, so needs to be installed straight from github              
#install.packages("remotes")
#remotes::install_github("AllanCameron/geomtextpath")
```

Once installed, they have to be loaded each session using the `library` function.

```{r}

# load packages 
library(tidyverse) # for efficient data wrangling
library(patchwork) # for combining plots
library(geomtextpath) # for text in ggplots 
```

# Step 3: Modelling discrete Elephants

## Build the model

```{r}
selection_model <- function(init_pop, num_gens, lifetime_fecundity, hunting_strength, female_mortality_fraction,male_mortality_fraction){
  ###############################
  #moves elephant population forward in time
  #inputs:
    #init_pop (int): initial population (equally divided in sex ratio, and females are equally divided among XX and xX)
    #num_gens (int): number of generations for which to run the model
    #lifetime_fecundity (int): number of offspring a female elephant makes before death
    #hunting_strength (float): fraction of individuals that die because they are hunted. (1-h) survive.
    #mortality_fraction (float): fraction of individuals that die due to intrinsic mortality. (1-mortality_fraction) survive.
  ##############################
  
  
  F <- lifetime_fecundity
  lucky_frac <- 1 - hunting_strength
  sm <- 1 - male_mortality_fraction
  sf <- 1 - female_mortality_fraction
  
  #setup
  adult_matrix <- matrix(nrow = 3, ncol = num_gens) #the three rows are XY, xX, XX
  baby_matrix <- matrix(nrow=3, ncol=num_gens)

  rownames(adult_matrix) <- c('XY','xX','XX')
  rownames(baby_matrix) <- c('XY','xX','XX')
  
  #initialize
  adult_matrix[,1] <- c(init_pop/2,init_pop/4,init_pop/4)
  #adult_matrix[,1] <- c(round(init_pop/2),1,round(init_pop/2)-1)
  baby_matrix[,1] <- c(0,0,0)
  
  for (t in 2:num_gens){
    
    ###############################
    #reproduction
    baby_matrix['XY',t] <- F*(adult_matrix['XX',t-1]/2 + adult_matrix['xX',t-1]/4)
    baby_matrix['XX',t] <- F*(adult_matrix['XX',t-1]/2 + adult_matrix['xX',t-1]/4)
    baby_matrix['xX',t] <- F*(adult_matrix['xX',t-1]/4)
    
    
    #survival
    adult_matrix['XY',t] <- sm*baby_matrix['XY',t] 
    adult_matrix['XX',t] <- sf*lucky_frac*baby_matrix['XX',t]
    adult_matrix['xX',t] <-  sf*baby_matrix['xX',t]
  }

  plot_data <- data.frame(t(adult_matrix))
  plot_data <- cbind(seq(1:num_gens),plot_data)
  
  plot_data %>% mutate(tuskless_freq = xX/(xX+XX)) -> plot_data
  
  colnames(plot_data)[1] <- 'generation'
    
  return (list(baby_matrix, adult_matrix,plot_data))
}

num_gens <- 50

out <- selection_model(init_pop = 10, num_gens = num_gens, lifetime_fecundity = 6, hunting_strength = 0.55, male_mortality_fraction = 0.2,female_mortality_fraction=0.2)

plot_data <- out[[3]]

#########
#plotting
p <- ggplot(plot_data,aes(x=generation)) + geom_point(size=2,aes(y=XX,color='tusked')) + geom_point(size=2,aes(y=xX,color='tuskless'))

#aesthetics
p <- p + ylab('Population Size') + xlab("Time (generations)")
p <- p + coord_cartesian(clip = 'off') + theme(plot.margin = unit(c(5,1,1,1), "lines")) + theme_light()
p <- p + theme(panel.border = element_blank(), axis.line = element_line(colour = "black"), panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p <- p + theme(axis.text = element_text(face = 'bold', color = 'black',size = 15))
p <- p + theme(axis.title = element_text(face = 'bold',color = 'black',size = 15))
p <- p + theme(legend.title = element_text(face = 'bold',color = 'black',size = 20))
p <- p + theme(legend.text = element_text(face = 'bold',color = 'black',size = 10))
p <- p + theme(title = element_text(face = 'bold',color = 'black',size = 10))
p <- p + theme(axis.ticks.length = unit(.15, "cm")) + theme(axis.ticks = element_line(color='black',linewidth=0.5))
p <- p + scale_color_manual(values = c('#0000ff','#ff0000'))
p <- p + theme(legend.title=element_blank())
p

######################
#plot frequency
freq_plot <- ggplot(plot_data,aes(x=generation,y=tuskless_freq)) + geom_point(size=2,color='red') + geom_line(color='red')

#aesthetics
freq_plot <- freq_plot + ylab('Frequency of\ntuskless females') + xlab("Time (generations)")
freq_plot <- freq_plot + coord_cartesian(clip = 'off') + theme(plot.margin = unit(c(5,1,1,1), "lines")) + theme_light()
freq_plot <- freq_plot + theme(panel.border = element_blank(), axis.line = element_line(colour = "black"), panel.grid.major = element_blank(), panel.grid.minor = element_blank())
freq_plot <- freq_plot + theme(axis.text = element_text(face = 'bold', color = 'black',size = 15))
freq_plot <- freq_plot + theme(axis.title = element_text(face = 'bold',color = 'black',size = 15))
freq_plot <- freq_plot + theme(legend.title = element_text(face = 'bold',color = 'black',size = 20))
freq_plot <- freq_plot + theme(legend.text = element_text(face = 'bold',color = 'black',size = 10))
freq_plot <- freq_plot + theme(title = element_text(face = 'bold',color = 'black',size = 10))
freq_plot <- freq_plot + theme(axis.ticks.length = unit(.15, "cm")) + theme(axis.ticks = element_line(color='black',linewidth=0.5))
freq_plot <- freq_plot + ylim(c(0,1))
freq_plot
```

## Some quick analytics

We can also ask about long term equilibria. Letting  $h$ be hunting rate, $F$ be fecundity, and $s$ be survival, we note that the dynamics of the system are given by

$$
\begin{equation}
\begin{bmatrix}
N_{xX}\\
N_{XX}
\end{bmatrix}_{t+1} = \frac{Fs}{2} 
\begin{bmatrix}
\frac{1}{2} & 0\\
\frac{1-h}{2} & 1-h
\end{bmatrix}
\begin{bmatrix}
N_{xX}\\
N_{XX}
\end{bmatrix}_{t}
\end{equation}
$$
If the two phenotypes have reached equilibrium frequencies (after a sufficiently large time $t$), we must have $N_{ij}(t+1) = \lambda N_{ij}(t)$, i.e. growth rescales all frequencies equally. Substituting this into our dynamic equation and dropping the $t$ dependence, we obtain

$$
\begin{equation}
 \frac{Fs}{2} 
\begin{bmatrix}
\frac{1}{2} & 0\\
\frac{1-h}{2} & 1-h
\end{bmatrix}
\begin{bmatrix}
N_{xX}\\
N_{XX}
\end{bmatrix} = \lambda \begin{bmatrix}
N_{xX}\\
N_{XX}
\end{bmatrix}
\end{equation}
$$
We now need to solve the system of equations

$$
\begin{align}
 \frac{Fs}{4} N_{xX} &= \lambda N_{xX}\\
\frac{Fs}{4}(1-h)N_{xX} + \frac{Fs}{2}(1-h)N_{XX} &= \lambda N_{XX}
\end{align}
$$
Assuming $N_{xX} \neq 0$, the first of these equations immediately yields $\lambda = Fs/4$. Thus, the second equation becomes
$$
\begin{equation}
(1-h)\left[N_{xX}+2N_{XX}\right] =  N_{XX}
\end{equation}
$$

After some simple algebra, we obtain the relation 


$$
\begin{equation}
\frac{N_{xX}}{N_{XX}} = \frac{2h-1}{1-h}
\end{equation}
$$
or that the equilibrium frequency $p$ of tuskless females is given by

$$
\begin{equation}
p = \frac{N_{xX}}{N_{xX} + N_{XX}} = 2 - \frac{1}{h}
\end{equation}
$$
Note that this is only biologically meaningful (i.e. within $[0,1]$) for $h \geq 1/2$. 


## Plotting the analytics

We can now plot this curve:

```{r}
eq_freq_plot <-
tibble(prop_life_lost = seq(from = 0.5, to = 1, length.out = 500)) %>% 
  mutate(prop_tuskless_females = 2 - 1/prop_life_lost) %>% 
  # plot
  ggplot(aes(x = prop_life_lost,
             y = prop_tuskless_females)) +
  geom_line(linewidth = 1,color='red') +
  labs(x = 'Hunting rate (h)',
       y = 'Equilibrium frequency\nof tuskless females',
       title = "") +
  scale_x_continuous(limits = c(0, 1.01), expand = c(0, 0)) +
  scale_y_continuous(limits = c(0, 1), expand = c(0.0, 0)) +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5))
  
eq_freq_plot <- eq_freq_plot + coord_cartesian(clip = 'off') + theme(plot.margin = unit(c(5,1,1,1), "lines")) + theme_light()
eq_freq_plot <- eq_freq_plot + theme(panel.border = element_blank(), axis.line = element_line(colour = "black"), panel.grid.major = element_blank(), panel.grid.minor = element_blank())
eq_freq_plot <- eq_freq_plot + theme(axis.text = element_text(face = 'bold', color = 'black',size = 15))
eq_freq_plot <- eq_freq_plot + theme(axis.title = element_text(face = 'bold',color = 'black',size = 15))
eq_freq_plot <- eq_freq_plot + theme(legend.title = element_text(face = 'bold',color = 'black',size = 20))
eq_freq_plot <- eq_freq_plot + theme(legend.text = element_text(face = 'bold',color = 'black',size = 10))
eq_freq_plot <- eq_freq_plot + theme(title = element_text(face = 'bold',color = 'black',size = 10))
eq_freq_plot <- eq_freq_plot + theme(axis.ticks.length = unit(.15, "cm")) + theme(axis.ticks = element_line(color='black',linewidth=0.5))

eq_freq_plot
```


