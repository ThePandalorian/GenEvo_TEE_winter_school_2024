---
title: "Change this to something appropriate"
author: "Modelly McModel face"
editor: source
format:
  html:
      theme: Minty # browse these here: https://quarto.org/docs/output-formats/html-themes.html
      page-layout: full
      #max-width: 1800px # adjust if your plots don't fit or you want more or less whitespace
      toc: true # do you want a table of contents, by default it floats as you scroll
      toc-location: left # where should it be displayed
      toc-title: "Sections"
      code-fold: show # fold code up for neater display
      code-tools: true # add a button at the top of doc to show all code
      code-summary: "Show/hide the code"
      code-line-numbers: true
      smooth-scroll: true
      embed-resources: true # output doc contains all info needed to display html
      #fig-format: png # this is finicky to the point that I'm not sure it works
      lightbox: true
      #page-layout: full
# this changes what parts of your output/code are shown in the report
execute:
      warning: false
      error: false
      echo: TRUE
---

# Step 0: Quarto

Quarto is a mix of a text editor like word or LaTeX and a `.R` file. You can write notes in plain text outside code blocks. Headings are produced by hashtags.

If you want to write R code, you'll need to open a code block. That looks like this

```{r}
# in here you'll need a hashtag to write comments

5*5
```


# Step 1: Setup R

If you don't have them already, `tidyverse`, `patchwork` and `geomtextpath` need to be installed. For those unfamiliar with `R`, you only need to do this once per computer. 

```{r}
# code is commented out because I already have them installed

#options(timeout = 1000) # you need this to install stuff on slow networks
#install.packages(c("tidyverse", "patchwork"))

# not on CRAN, so needs to be installed straight from github              
#install.packages("remotes")
#remotes::install_github("AllanCameron/geomtextpath")
```

Once installed, they have to be loaded each session using the `library` function.

```{r}

# load packages 
library(tidyverse) # for efficient data wrangling
library(patchwork) # for combining plots
library(geomtextpath) # for text in ggplots 
```

# Step 3: Modelling discrete Elephants

## Build the model

```{r}

```

## Plot the results

When you're happy with the matrix called `N`, plug it into the below code to create the `plotting_data` object, a version of the data amenable for plotting.

**The prettiest ggplot challenge**

There will be a prize!

```{r}
# ggplot doesn't play nice with matrices, so we need to wrangle the data into a plottable format.

plotting_data <- 
  N %>% # you can run these lines step by step to see what each does
  as.data.frame() %>% 
  as_tibble() %>% 
  rownames_to_column() %>% 
  pivot_longer(-rowname) %>% 
  rename(Genotype = rowname,
         Generation = name,
         N_adults = value) %>% 
  mutate(Genotype = case_when(Genotype == 1 ~ "xX",
                              Genotype == 2 ~ "XX",
                              Genotype == 3 ~ "XY"),
         Generation = as.numeric(str_remove(Generation, "V")))

# your very pretty ggplot goes here
```

Here's Tom's attempt

```{r}
p1 <-
  plotting_data %>% 
  filter(Genotype != "XY") %>% # if male survival = female survival there's no need to plot XY
  ggplot(aes(x = Generation, y = N_adults, colour = Genotype)) +
  geom_point(size = 2.5) +
  labs(y = "Number of adults") +
  theme_bw()

p2 <-
  plotting_data %>% 
  filter(Genotype != "XY") %>% # if male survival = female survival there's no need to plot XY
  ggplot(aes(x = Generation, y = log(N_adults), colour = Genotype)) +
  geom_point(size = 2.5) +
  labs(y = "log(Number of adults)") +
  theme_bw()

p3 <-
  plotting_data %>% 
  # More wrangling needed - make each genotype into a column  
  pivot_wider(names_from = "Genotype", values_from = "N_adults") %>% 
  # calc prop tuskless
  mutate(prop_tuskless_females = xX / (XX + xX)) %>% 
  # plot
  ggplot(aes(x = Generation, y = prop_tuskless_females)) +
  geom_point(size = 2.5) +
  scale_y_continuous(limits = c(0, 1)) +
  labs(y = "Prop. tuskless females") +
  theme_bw()

p4 <-
  plotting_data %>% 
  # More wrangling needed - make each genotype into a column  
  pivot_wider(names_from = "Genotype", values_from = "N_adults") %>% 
  # calc prop tuskless
  mutate(prop_x = (xX / 2) / ((xX / 2) + XX + (XY / 2))) %>% 
  # plot
  ggplot(aes(x = Generation, y = prop_x)) +
  geom_point(size = 2.5) +
  scale_y_continuous(limits = c(0, 1)) +
  labs(y = "Prop. mutant x") +
  theme_bw()

top <- (p1 + p2) + plot_layout(guides = "collect")

bottom <- p3 + p4

top / bottom
```

## Plotting the analytics

Using matrix algebra, we just found that when h >= 0.5 then there are $2 - 1/h$ tuskless females for every tusked female at equilibrium (you can think of this as in the distant future). We can plot this like so:

```{r}
# wrangle
p5 <-
tibble(prop_life_lost = seq(from = 0.5, to = 1, length.out = 500)) %>% 
  mutate(prop_tuskless_females = 2 - 1/prop_life_lost) %>% 
  # plot
  ggplot(aes(x = prop_life_lost,
             y = prop_tuskless_females)) +
  geom_line(linewidth = 1) +
  labs(x = 'Proportion of life lost (of tuskeds)',
       y = 'Prop. tuskless females',
       title = "Model 1: far future") +
  scale_x_continuous(limits = c(0, 1.01), expand = c(0, 0)) +
  scale_y_continuous(limits = c(0, 1), expand = c(0.0, 0)) +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5))
  
p5
```


